#!/bin/bash
#
# This script will remove an image, but first remove all of the child images 
# of that image so that we can proceed.
#
# There's no easy to do this without issuing a bunch of Docker commands, so here we are.
#

# Errors are fatal
set -e

if test ! "$1"
then
	echo "! "
	echo "! Syntax: $0 docker_image_id"
	echo "! "
	exit 1
fi

MAIN_IMAGE=$1

#
# Check to see if the specified image exists.
# 
# If it does, something will be returned, if not, nothing will be returned.
#
function does_image_exist() {
	local IMAGE=$1
	RESULT=$(docker images -a | grep $IMAGE || true)
	echo $RESULT
}


#
# Get child images for the supplied argument.  Nothing is returned if none are found
#
function get_child_images() {
	local IMAGE=$1
	RESULT=$(docker images --filter since=${IMAGE} --quiet 2>/dev/null | sort | uniq | tr '\n' ' ')
	echo $RESULT
}


echo "# "
echo "# Verifying that image ${MAIN_IMAGE} exists..."
if test ! "$(does_image_exist ${MAIN_IMAGE})"
then
	echo "! "
	echo "! Sorry, image ${MAIN_IMAGE} not found!"
	echo "! "
	exit 1
fi

echo "# ...found!"

echo "# "
echo "# Checking for stopped containers..."
CONTAINERS=$(docker ps -a | grep Exit | awk '{print $1}' | tr '\n' ' ')
if test "$CONTAINERS"
then
	echo "# "
	echo "# Found the following stopped containers (which may or may not be related to our main image): "
	echo "# ${CONTAINERS}"
	echo "# "
	echo "# Removing stopped containers..."
	echo "# "
	docker rm ${CONTAINERS}

else
	echo "# ...none found!"

fi

function remove_child_images() {

	local MAIN_IMAGE=$1

	echo "# "
	echo "# Checking for child images of ${MAIN_IMAGE}...."
	local IMAGES=$(get_child_images ${MAIN_IMAGE})
	#docker images --filter since=${MAIN_IMAGE} # Debugging

	if test ! "$IMAGES"
	then
		echo "# No child images, bailing out!"
		return 0
	fi

	echo "# "
	echo "# Found the following child images: "
	echo "# ${IMAGES}"
	echo "# "
	echo "# Removing child images..."
	echo "# "

	for IMAGE in $IMAGES
	do
		echo "# Checking image ${IMAGE} for tags that use it..."
		local TAGS=$(docker images | grep $IMAGE | awk '{print $1}' | sort | uniq | tr '\n' ' ')
		if test "${TAGS}"
		then
			echo "# Tags found: ${TAGS}"
			echo "# Removing tags..."
			docker rmi ${TAGS}
		fi

		#
		# It's possible that removing all tags may remove that image,
		# but if not, pull that image.
		#
		if test "$(does_image_exist ${IMAGE})"
		then
			local CHILDREN=$(get_child_images ${IMAGE})
			if test "$CHILDREN"
			then
				echo "# Found some nested child images: ${CHILDREN}"
				for CHILD in $CHILDREN
				do
					remove_child_images $CHILD
				done
			fi

			#
			# It's possible that if we removed nested child images, we got one of the images in
			# this pass as well.
			#
			if test "$(does_image_exist ${IMAGE})"
			then
				echo "# Removing image ${IMAGE}..."
				docker rmi $IMAGE
			fi

		fi

	done

} # End of remove_child_images()


remove_child_images ${MAIN_IMAGE}

echo "# Done!"

